{"version":3,"file":"index.js","sources":["../src/rows.ts","../src/rowGroup.ts","../src/rowsByRowgroup.ts","../src/cells.ts","../src/rowByFirstCellText.ts","../src/utils/colspan.ts","../src/utils/columnIndexByHeaderText.ts","../src/utils/cellInRowByIndex.ts","../src/columnCellsByHeaderText.ts","../src/cellByRowAndColumnHeaders.ts"],"sourcesContent":["import { queryHelpers } from '@testing-library/dom'\n\nfunction queryAllRows(container: HTMLElement) {\n  return Array.from(container.querySelectorAll('tr'))\n}\n\nconst getMultipleError = () => 'Found multiple rows'\nconst getMissingError = () => 'Found no rows'\nconst [\n  queryRow,\n  getAllRows,\n  getRow,\n  findAllRows,\n  findRow\n] = queryHelpers.buildQueries(queryAllRows, getMultipleError, getMissingError)\nexport { queryAllRows, queryRow, getAllRows, getRow, findAllRows, findRow }\n","import { queryHelpers } from '@testing-library/dom'\nimport { RowGroup } from './types'\n\nfunction queryAllByRowgroupType(\n  container: HTMLElement,\n  rowgroupTagName: RowGroup\n) {\n  return Array.from(container.querySelectorAll(rowgroupTagName))\n}\n\nconst getMultipleError = (_c: HTMLElement, rowgroupTagName: RowGroup) =>\n  `Found multiple ${rowgroupTagName} elements`\nconst getMissingError = (_c: HTMLElement, rowgroupTagName: RowGroup) =>\n  `Found no ${rowgroupTagName} elements`\n\nconst [\n  queryByRowgroupType,\n  getAllByRowgroupType,\n  getByRowgroupType,\n  findAllByRowgroupType,\n  findByRowgroupType\n] = queryHelpers.buildQueries(\n  queryAllByRowgroupType,\n  getMultipleError,\n  getMissingError\n)\nexport {\n  queryAllByRowgroupType,\n  queryByRowgroupType,\n  getAllByRowgroupType,\n  getByRowgroupType,\n  findAllByRowgroupType,\n  findByRowgroupType\n}\n","import { queryHelpers } from '@testing-library/dom'\nimport { RowGroup } from './types'\n\nfunction queryAllRowsByRowgroupType(\n  container: HTMLElement,\n  rowgroupTagName: RowGroup\n) {\n  return Array.from(\n    container.querySelectorAll<HTMLElement>(`${rowgroupTagName} tr`)\n  )\n}\n\nconst getMultipleError = (_c: HTMLElement, rowgroupTagName: RowGroup) =>\n  `Found multiple rows within ${rowgroupTagName} elements`\nconst getMissingError = (_c: HTMLElement, rowgroupTagName: RowGroup) =>\n  `Found no rows within ${rowgroupTagName} elements`\n\nconst [\n  queryRowByRowgroupType,\n  getAllRowsByRowgroupType,\n  getRowByRowgroupType,\n  findAllRowsByRowgroupType,\n  findRowByRowgroupType\n] = queryHelpers.buildQueries(\n  queryAllRowsByRowgroupType,\n  getMultipleError,\n  getMissingError\n)\nexport {\n  queryAllRowsByRowgroupType,\n  queryRowByRowgroupType,\n  getAllRowsByRowgroupType,\n  getRowByRowgroupType,\n  findAllRowsByRowgroupType,\n  findRowByRowgroupType\n}\n","import { queryHelpers } from '@testing-library/dom'\n\nfunction queryAllCells(container: HTMLElement) {\n  return Array.from(container.querySelectorAll<HTMLElement>('td,th'))\n}\n\nconst getMultipleError = () => 'Found multiple cells'\nconst getMissingError = () => 'Found no cells'\nconst [\n  queryCell,\n  getAllCells,\n  getCell,\n  findAllCells,\n  findCell\n] = queryHelpers.buildQueries(queryAllCells, getMultipleError, getMissingError)\nexport {\n  queryAllCells,\n  queryCell,\n  getAllCells,\n  getCell,\n  findAllCells,\n  findCell\n}\n","import {\n  queryHelpers,\n  getNodeText,\n  getDefaultNormalizer\n} from '@testing-library/dom'\nimport { queryAllRows } from './rows'\nimport { queryAllCells } from './cells'\n\nfunction queryAllRowsByFirstCellText(\n  container: HTMLElement,\n  textContent: string\n) {\n  const rows = queryAllRows(container)\n  return rows.filter((row) => {\n    const cellsInRow = queryAllCells(row)\n    if (cellsInRow.length === 0) {\n      return false\n    }\n\n    // TODO - make normaliser customisable, support textmatch\n    return getDefaultNormalizer()(getNodeText(cellsInRow[0])) === textContent\n  })\n}\n\nconst getMultipleError = (_c: HTMLElement, textContent: string) =>\n  `Found multiple rows with ${textContent} in the first cell`\nconst getMissingError = (_c: HTMLElement, textContent: string) =>\n  `Found no rows with ${textContent} in the first cell`\n\nconst [\n  queryRowByFirstCellText,\n  getAllRowsByFirstCellText,\n  getRowByFirstCellText,\n  findAllRowsByFirstCellText,\n  findRowByFirstCellText\n] = queryHelpers.buildQueries(\n  queryAllRowsByFirstCellText,\n  getMultipleError,\n  getMissingError\n)\nexport {\n  queryAllRowsByFirstCellText,\n  queryRowByFirstCellText,\n  getAllRowsByFirstCellText,\n  getRowByFirstCellText,\n  findAllRowsByFirstCellText,\n  findRowByFirstCellText\n}\n","export const getColspan = (cell: HTMLElement): number => {\n  const colspanAttr = cell.attributes.getNamedItem('colspan')\n  const colspanValue = colspanAttr ? colspanAttr.value : null\n  return colspanValue ? parseInt(colspanValue, 10) : 1\n}\n","import { getNodeText, getDefaultNormalizer } from '@testing-library/dom'\n\nimport { queryAllCells } from '../cells'\nimport { queryAllRowsByRowgroupType } from '../rowsByRowgroup'\nimport { getColspan } from './colspan'\n\nexport const getColumnIndexByHeaderText = (\n  container: HTMLElement,\n  textContent: string,\n  headerRowIndex = 0\n) => {\n  const headerCellsByRow = queryAllRowsByRowgroupType(\n    container,\n    'thead'\n  ).map((row) => queryAllCells(row))\n\n  if (headerRowIndex > headerCellsByRow.length - 1) {\n    return -1\n  }\n\n  const headerRowToUse = headerCellsByRow[headerRowIndex]\n\n  const cellIndex = headerRowToUse.findIndex((cell) => {\n    // TODO - allow normaliser to be overridden\n    return getDefaultNormalizer()(getNodeText(cell)) === textContent\n  })\n  if (cellIndex === -1) {\n    return -1\n  }\n\n  const precedingCells = headerRowToUse.slice(0, cellIndex)\n  return precedingCells.reduce((acc, curr) => {\n    return acc + getColspan(curr)\n  }, 0)\n}\n","import { queryAllCells } from '../cells'\nimport { getColspan } from './colspan'\n\ntype Maybe<T> = T | null\ntype Accumulator = { cell: Maybe<HTMLElement> | null; precedingColspan: number }\n\nexport const getCellInRowByIndex = (row: HTMLElement, index: number) => {\n  const cells = queryAllCells(row)\n\n  const result = cells.reduce(\n    (acc: Accumulator, curr) => {\n      if (acc.precedingColspan > index) {\n        return acc\n      }\n      const newColspan = acc.precedingColspan + getColspan(curr)\n      return {\n        cell: newColspan >= index ? curr : null,\n        precedingColspan: newColspan\n      }\n    },\n    { cell: null, precedingColspan: 0 }\n  )\n  return result.cell\n}\n","import { queryHelpers } from '@testing-library/dom'\nimport { queryAllRows } from './rows'\nimport { getColumnIndexByHeaderText } from './utils/columnIndexByHeaderText'\nimport { getCellInRowByIndex } from './utils/cellInRowByIndex'\n\nfunction queryAllColumnCellsByHeaderText(\n  container: HTMLElement,\n  textContent: string,\n  headerRowIndex = 0\n) {\n  const cellIndex = getColumnIndexByHeaderText(\n    container,\n    textContent,\n    headerRowIndex\n  )\n\n  return queryAllRows(container)\n    .map((row) => {\n      return getCellInRowByIndex(row, cellIndex)\n    })\n    .filter((cell) => !!cell) as HTMLElement[]\n}\n\nconst getMultipleError = (_c: HTMLElement, textContent: string) =>\n  `Found multiple cells with ${textContent} in the header`\nconst getMissingError = (_c: HTMLElement, textContent: string) =>\n  `Found no rows with ${textContent} in the header`\n\nconst [\n  queryColumnCellByHeaderText,\n  getAllColumnCellsByHeaderText,\n  getColumnCellByHeaderText,\n  findAllColumnCellsByHeaderText,\n  findColumnCellByHeaderText\n] = queryHelpers.buildQueries<[string, number | undefined]>(\n  queryAllColumnCellsByHeaderText,\n  getMultipleError,\n  getMissingError\n)\nexport {\n  queryAllColumnCellsByHeaderText,\n  queryColumnCellByHeaderText,\n  getAllColumnCellsByHeaderText,\n  getColumnCellByHeaderText,\n  findAllColumnCellsByHeaderText,\n  findColumnCellByHeaderText\n}\n","import { queryHelpers } from '@testing-library/dom'\nimport { queryAllRowsByFirstCellText } from './rowByFirstCellText'\nimport { getColumnIndexByHeaderText } from './utils/columnIndexByHeaderText'\nimport { getCellInRowByIndex } from './utils/cellInRowByIndex'\n\nfunction queryAllCellsByRowAndColumnHeaders(\n  container: HTMLElement,\n  rowHeaderText: string,\n  columnheaderText: string,\n  headerRowIndex = 0\n) {\n  const rows = queryAllRowsByFirstCellText(container, rowHeaderText)\n\n  const columnIndex = getColumnIndexByHeaderText(\n    container,\n    columnheaderText,\n    headerRowIndex\n  )\n\n  return rows\n    .map((row) => getCellInRowByIndex(row, columnIndex))\n    .filter((cell) => !!cell) as HTMLElement[]\n}\n\nconst getMultipleError = (\n  _c: HTMLElement,\n  rowHeaderText: string,\n  columnheaderText: string\n) =>\n  `Found multiple cells with ${rowHeaderText} in the first column and ${columnheaderText} in the header`\nconst getMissingError = (\n  _c: HTMLElement,\n  rowHeaderText: string,\n  columnheaderText: string\n) =>\n  `Found no rows with ${rowHeaderText} in the first column and ${columnheaderText} in the header`\n\nconst [\n  queryCellByRowAndColumnHeaders,\n  getAllCellsByRowAndColumnHeaders,\n  getCellByRowAndColumnHeaders,\n  findAllCellsByRowAndColumnHeaders,\n  findCellByRowAndColumnHeaders\n] = queryHelpers.buildQueries<[string, string, number | undefined]>(\n  queryAllCellsByRowAndColumnHeaders,\n  getMultipleError,\n  getMissingError\n)\nexport {\n  queryAllCellsByRowAndColumnHeaders,\n  queryCellByRowAndColumnHeaders,\n  getAllCellsByRowAndColumnHeaders,\n  getCellByRowAndColumnHeaders,\n  findAllCellsByRowAndColumnHeaders,\n  findCellByRowAndColumnHeaders\n}\n"],"names":["queryAllRows","container","Array","from","querySelectorAll","getMultipleError","getMissingError","queryHelpers","buildQueries","queryRow","getAllRows","getRow","findAllRows","findRow","queryAllByRowgroupType","rowgroupTagName","_c","queryByRowgroupType","getAllByRowgroupType","getByRowgroupType","findAllByRowgroupType","findByRowgroupType","queryAllRowsByRowgroupType","queryRowByRowgroupType","getAllRowsByRowgroupType","getRowByRowgroupType","findAllRowsByRowgroupType","findRowByRowgroupType","queryAllCells","queryCell","getAllCells","getCell","findAllCells","findCell","queryAllRowsByFirstCellText","textContent","rows","filter","row","cellsInRow","length","getDefaultNormalizer","getNodeText","queryRowByFirstCellText","getAllRowsByFirstCellText","getRowByFirstCellText","findAllRowsByFirstCellText","findRowByFirstCellText","getColspan","cell","colspanAttr","attributes","getNamedItem","colspanValue","value","parseInt","getColumnIndexByHeaderText","headerRowIndex","headerCellsByRow","map","headerRowToUse","cellIndex","findIndex","precedingCells","slice","reduce","acc","curr","getCellInRowByIndex","index","cells","result","precedingColspan","newColspan","queryAllColumnCellsByHeaderText","queryColumnCellByHeaderText","getAllColumnCellsByHeaderText","getColumnCellByHeaderText","findAllColumnCellsByHeaderText","findColumnCellByHeaderText","queryAllCellsByRowAndColumnHeaders","rowHeaderText","columnheaderText","columnIndex","queryCellByRowAndColumnHeaders","getAllCellsByRowAndColumnHeaders","getCellByRowAndColumnHeaders","findAllCellsByRowAndColumnHeaders","findCellByRowAndColumnHeaders"],"mappings":"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"}