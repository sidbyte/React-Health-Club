var dom = require('@testing-library/dom');

function queryAllRows(container) {
  return Array.from(container.querySelectorAll('tr'));
}

var getMultipleError = function getMultipleError() {
  return 'Found multiple rows';
};

var getMissingError = function getMissingError() {
  return 'Found no rows';
};

var _queryHelpers$buildQu = dom.queryHelpers.buildQueries(queryAllRows, getMultipleError, getMissingError),
    queryRow = _queryHelpers$buildQu[0],
    getAllRows = _queryHelpers$buildQu[1],
    getRow = _queryHelpers$buildQu[2],
    findAllRows = _queryHelpers$buildQu[3],
    findRow = _queryHelpers$buildQu[4];

function queryAllByRowgroupType(container, rowgroupTagName) {
  return Array.from(container.querySelectorAll(rowgroupTagName));
}

var getMultipleError$1 = function getMultipleError(_c, rowgroupTagName) {
  return "Found multiple " + rowgroupTagName + " elements";
};

var getMissingError$1 = function getMissingError(_c, rowgroupTagName) {
  return "Found no " + rowgroupTagName + " elements";
};

var _queryHelpers$buildQu$1 = dom.queryHelpers.buildQueries(queryAllByRowgroupType, getMultipleError$1, getMissingError$1),
    queryByRowgroupType = _queryHelpers$buildQu$1[0],
    getAllByRowgroupType = _queryHelpers$buildQu$1[1],
    getByRowgroupType = _queryHelpers$buildQu$1[2],
    findAllByRowgroupType = _queryHelpers$buildQu$1[3],
    findByRowgroupType = _queryHelpers$buildQu$1[4];

function queryAllRowsByRowgroupType(container, rowgroupTagName) {
  return Array.from(container.querySelectorAll(rowgroupTagName + " tr"));
}

var getMultipleError$2 = function getMultipleError(_c, rowgroupTagName) {
  return "Found multiple rows within " + rowgroupTagName + " elements";
};

var getMissingError$2 = function getMissingError(_c, rowgroupTagName) {
  return "Found no rows within " + rowgroupTagName + " elements";
};

var _queryHelpers$buildQu$2 = dom.queryHelpers.buildQueries(queryAllRowsByRowgroupType, getMultipleError$2, getMissingError$2),
    queryRowByRowgroupType = _queryHelpers$buildQu$2[0],
    getAllRowsByRowgroupType = _queryHelpers$buildQu$2[1],
    getRowByRowgroupType = _queryHelpers$buildQu$2[2],
    findAllRowsByRowgroupType = _queryHelpers$buildQu$2[3],
    findRowByRowgroupType = _queryHelpers$buildQu$2[4];

function queryAllCells(container) {
  return Array.from(container.querySelectorAll('td,th'));
}

var getMultipleError$3 = function getMultipleError() {
  return 'Found multiple cells';
};

var getMissingError$3 = function getMissingError() {
  return 'Found no cells';
};

var _queryHelpers$buildQu$3 = dom.queryHelpers.buildQueries(queryAllCells, getMultipleError$3, getMissingError$3),
    queryCell = _queryHelpers$buildQu$3[0],
    getAllCells = _queryHelpers$buildQu$3[1],
    getCell = _queryHelpers$buildQu$3[2],
    findAllCells = _queryHelpers$buildQu$3[3],
    findCell = _queryHelpers$buildQu$3[4];

function queryAllRowsByFirstCellText(container, textContent) {
  var rows = queryAllRows(container);
  return rows.filter(function (row) {
    var cellsInRow = queryAllCells(row);

    if (cellsInRow.length === 0) {
      return false;
    }

    return dom.getDefaultNormalizer()(dom.getNodeText(cellsInRow[0])) === textContent;
  });
}

var getMultipleError$4 = function getMultipleError(_c, textContent) {
  return "Found multiple rows with " + textContent + " in the first cell";
};

var getMissingError$4 = function getMissingError(_c, textContent) {
  return "Found no rows with " + textContent + " in the first cell";
};

var _queryHelpers$buildQu$4 = dom.queryHelpers.buildQueries(queryAllRowsByFirstCellText, getMultipleError$4, getMissingError$4),
    queryRowByFirstCellText = _queryHelpers$buildQu$4[0],
    getAllRowsByFirstCellText = _queryHelpers$buildQu$4[1],
    getRowByFirstCellText = _queryHelpers$buildQu$4[2],
    findAllRowsByFirstCellText = _queryHelpers$buildQu$4[3],
    findRowByFirstCellText = _queryHelpers$buildQu$4[4];

var getColspan = function getColspan(cell) {
  var colspanAttr = cell.attributes.getNamedItem('colspan');
  var colspanValue = colspanAttr ? colspanAttr.value : null;
  return colspanValue ? parseInt(colspanValue, 10) : 1;
};

var getColumnIndexByHeaderText = function getColumnIndexByHeaderText(container, textContent, headerRowIndex) {
  if (headerRowIndex === void 0) {
    headerRowIndex = 0;
  }

  var headerCellsByRow = queryAllRowsByRowgroupType(container, 'thead').map(function (row) {
    return queryAllCells(row);
  });

  if (headerRowIndex > headerCellsByRow.length - 1) {
    return -1;
  }

  var headerRowToUse = headerCellsByRow[headerRowIndex];
  var cellIndex = headerRowToUse.findIndex(function (cell) {
    return dom.getDefaultNormalizer()(dom.getNodeText(cell)) === textContent;
  });

  if (cellIndex === -1) {
    return -1;
  }

  var precedingCells = headerRowToUse.slice(0, cellIndex);
  return precedingCells.reduce(function (acc, curr) {
    return acc + getColspan(curr);
  }, 0);
};

var getCellInRowByIndex = function getCellInRowByIndex(row, index) {
  var cells = queryAllCells(row);
  var result = cells.reduce(function (acc, curr) {
    if (acc.precedingColspan > index) {
      return acc;
    }

    var newColspan = acc.precedingColspan + getColspan(curr);
    return {
      cell: newColspan >= index ? curr : null,
      precedingColspan: newColspan
    };
  }, {
    cell: null,
    precedingColspan: 0
  });
  return result.cell;
};

function queryAllColumnCellsByHeaderText(container, textContent, headerRowIndex) {
  if (headerRowIndex === void 0) {
    headerRowIndex = 0;
  }

  var cellIndex = getColumnIndexByHeaderText(container, textContent, headerRowIndex);
  return queryAllRows(container).map(function (row) {
    return getCellInRowByIndex(row, cellIndex);
  }).filter(function (cell) {
    return !!cell;
  });
}

var getMultipleError$5 = function getMultipleError(_c, textContent) {
  return "Found multiple cells with " + textContent + " in the header";
};

var getMissingError$5 = function getMissingError(_c, textContent) {
  return "Found no rows with " + textContent + " in the header";
};

var _queryHelpers$buildQu$5 = dom.queryHelpers.buildQueries(queryAllColumnCellsByHeaderText, getMultipleError$5, getMissingError$5),
    queryColumnCellByHeaderText = _queryHelpers$buildQu$5[0],
    getAllColumnCellsByHeaderText = _queryHelpers$buildQu$5[1],
    getColumnCellByHeaderText = _queryHelpers$buildQu$5[2],
    findAllColumnCellsByHeaderText = _queryHelpers$buildQu$5[3],
    findColumnCellByHeaderText = _queryHelpers$buildQu$5[4];

function queryAllCellsByRowAndColumnHeaders(container, rowHeaderText, columnheaderText, headerRowIndex) {
  if (headerRowIndex === void 0) {
    headerRowIndex = 0;
  }

  var rows = queryAllRowsByFirstCellText(container, rowHeaderText);
  var columnIndex = getColumnIndexByHeaderText(container, columnheaderText, headerRowIndex);
  return rows.map(function (row) {
    return getCellInRowByIndex(row, columnIndex);
  }).filter(function (cell) {
    return !!cell;
  });
}

var getMultipleError$6 = function getMultipleError(_c, rowHeaderText, columnheaderText) {
  return "Found multiple cells with " + rowHeaderText + " in the first column and " + columnheaderText + " in the header";
};

var getMissingError$6 = function getMissingError(_c, rowHeaderText, columnheaderText) {
  return "Found no rows with " + rowHeaderText + " in the first column and " + columnheaderText + " in the header";
};

var _queryHelpers$buildQu$6 = dom.queryHelpers.buildQueries(queryAllCellsByRowAndColumnHeaders, getMultipleError$6, getMissingError$6),
    queryCellByRowAndColumnHeaders = _queryHelpers$buildQu$6[0],
    getAllCellsByRowAndColumnHeaders = _queryHelpers$buildQu$6[1],
    getCellByRowAndColumnHeaders = _queryHelpers$buildQu$6[2],
    findAllCellsByRowAndColumnHeaders = _queryHelpers$buildQu$6[3],
    findCellByRowAndColumnHeaders = _queryHelpers$buildQu$6[4];

exports.findAllByRowgroupType = findAllByRowgroupType;
exports.findAllCells = findAllCells;
exports.findAllCellsByRowAndColumnHeaders = findAllCellsByRowAndColumnHeaders;
exports.findAllColumnCellsByHeaderText = findAllColumnCellsByHeaderText;
exports.findAllRows = findAllRows;
exports.findAllRowsByFirstCellText = findAllRowsByFirstCellText;
exports.findAllRowsByRowgroupType = findAllRowsByRowgroupType;
exports.findByRowgroupType = findByRowgroupType;
exports.findCell = findCell;
exports.findCellByRowAndColumnHeaders = findCellByRowAndColumnHeaders;
exports.findColumnCellByHeaderText = findColumnCellByHeaderText;
exports.findRow = findRow;
exports.findRowByFirstCellText = findRowByFirstCellText;
exports.findRowByRowgroupType = findRowByRowgroupType;
exports.getAllByRowgroupType = getAllByRowgroupType;
exports.getAllCells = getAllCells;
exports.getAllCellsByRowAndColumnHeaders = getAllCellsByRowAndColumnHeaders;
exports.getAllColumnCellsByHeaderText = getAllColumnCellsByHeaderText;
exports.getAllRows = getAllRows;
exports.getAllRowsByFirstCellText = getAllRowsByFirstCellText;
exports.getAllRowsByRowgroupType = getAllRowsByRowgroupType;
exports.getByRowgroupType = getByRowgroupType;
exports.getCell = getCell;
exports.getCellByRowAndColumnHeaders = getCellByRowAndColumnHeaders;
exports.getColumnCellByHeaderText = getColumnCellByHeaderText;
exports.getRow = getRow;
exports.getRowByFirstCellText = getRowByFirstCellText;
exports.getRowByRowgroupType = getRowByRowgroupType;
exports.queryAllByRowgroupType = queryAllByRowgroupType;
exports.queryAllCells = queryAllCells;
exports.queryAllCellsByRowAndColumnHeaders = queryAllCellsByRowAndColumnHeaders;
exports.queryAllColumnCellsByHeaderText = queryAllColumnCellsByHeaderText;
exports.queryAllRows = queryAllRows;
exports.queryAllRowsByFirstCellText = queryAllRowsByFirstCellText;
exports.queryAllRowsByRowgroupType = queryAllRowsByRowgroupType;
exports.queryByRowgroupType = queryByRowgroupType;
exports.queryCell = queryCell;
exports.queryCellByRowAndColumnHeaders = queryCellByRowAndColumnHeaders;
exports.queryColumnCellByHeaderText = queryColumnCellByHeaderText;
exports.queryRow = queryRow;
exports.queryRowByFirstCellText = queryRowByFirstCellText;
exports.queryRowByRowgroupType = queryRowByRowgroupType;
//# sourceMappingURL=index.js.map
